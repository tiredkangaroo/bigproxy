// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createRequest = `-- name: CreateRequest :exec
INSERT INTO
    requests (
        id,
        kind,
        datetime,
        host,
        clientIP,
        clientAuthorization,
        clientProcessName,
        requestMethod,
        requestURL,
        requestHeaders,
        requestBody,
        responseStatus,
        responseHeaders,
        responseBody,
        error
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateRequestParams struct {
	ID                  string
	Kind                int64
	Datetime            time.Time
	Host                string
	Clientip            string
	Clientauthorization string
	Clientprocessname   sql.NullString
	Requestmethod       sql.NullString
	Requesturl          sql.NullString
	Requestheaders      []byte
	Requestbody         []byte
	Responsestatus      sql.NullInt64
	Responseheaders     []byte
	Responsebody        []byte
	Error               sql.NullString
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) error {
	_, err := q.db.ExecContext(ctx, createRequest,
		arg.ID,
		arg.Kind,
		arg.Datetime,
		arg.Host,
		arg.Clientip,
		arg.Clientauthorization,
		arg.Clientprocessname,
		arg.Requestmethod,
		arg.Requesturl,
		arg.Requestheaders,
		arg.Requestbody,
		arg.Responsestatus,
		arg.Responseheaders,
		arg.Responsebody,
		arg.Error,
	)
	return err
}

const getRequestByID = `-- name: GetRequestByID :one
SELECT
    id, kind, datetime, host, clientip, clientauthorization, clientprocessname, requestmethod, requesturl, requestheaders, requestbody, responsestatus, responseheaders, responsebody, error
FROM
    requests
WHERE
    id = ?
`

func (q *Queries) GetRequestByID(ctx context.Context, id string) (Request, error) {
	row := q.db.QueryRowContext(ctx, getRequestByID, id)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.Kind,
		&i.Datetime,
		&i.Host,
		&i.Clientip,
		&i.Clientauthorization,
		&i.Clientprocessname,
		&i.Requestmethod,
		&i.Requesturl,
		&i.Requestheaders,
		&i.Requestbody,
		&i.Responsestatus,
		&i.Responseheaders,
		&i.Responsebody,
		&i.Error,
	)
	return i, err
}
